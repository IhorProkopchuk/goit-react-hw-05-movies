{"version":3,"file":"static/js/247.20e664d6.chunk.js","mappings":"+SAEMA,EAAW,+BACXC,EAAU,mCAEHC,EAAgB,mCAAG,sGACPC,EAAAA,EAAAA,IAAA,UAClBH,EADkB,uCACqBC,IAFd,uBACtBG,EADsB,EACtBA,KADsB,kBAIvBA,GAJuB,2CAAH,qDAOhBC,EAAkB,mCAAG,WAAMC,GAAN,yFACTH,EAAAA,EAAAA,IAAA,UAClBH,EADkB,iCACeC,EADf,iCAC+CK,EAD/C,gCADS,uBACxBF,EADwB,EACxBA,KADwB,kBAIzBA,GAJyB,2CAAH,sDAOlBG,EAAe,mCAAG,WAAMC,GAAN,yFACNL,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACAQ,EADA,oBACmBP,EADnB,oBADM,uBACrBG,EADqB,EACrBA,KADqB,kBAItBA,GAJsB,2CAAH,sDAOfK,EAAc,mCAAG,WAAMD,GAAN,yFACLL,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACAQ,EADA,4BAC2BP,EAD3B,oBADK,uBACpBG,EADoB,EACpBA,KADoB,kBAIrBA,GAJqB,2CAAH,sDAOdM,EAAiB,mCAAG,WAAMF,GAAN,yFACRL,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACAQ,EADA,4BAC2BP,EAD3B,2BADQ,uBACvBG,EADuB,EACvBA,KADuB,kBAIxBA,GAJwB,2CAAH,qD,2HCsB9B,UAhDa,WACX,IAAQI,GAAYG,EAAAA,EAAAA,MAAZH,QACR,GAAwBI,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,MAEAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAO,mCAAG,gHAEWT,EAAAA,EAAAA,IAAeD,GAF1B,gBAEJK,EAFI,EAEJA,KACRC,EAAQD,GACRG,GAAW,GAJC,gDAMZG,QAAQC,IAAR,MACAJ,GAAW,GAPC,yDAAH,qDAUbE,GACD,GAAE,CAACV,IAEJ,IAAMa,EAAmB,SAAAC,GACvBA,EAAMC,OAAOC,IAAMC,CACpB,EAED,OACE,iCACE,wBAAI,SACHV,GACC,SAAC,IAAD,KAEA,wBACGF,EAAKa,KAAI,gBAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,UAAWC,EAApB,EAAoBA,aAApB,OACR,2BACE,gBACEL,IAAG,0CAAqCK,GACxCC,IAAKD,EAAe,QAAU,WAC9BE,MAAO,IACPC,QAASX,KAEX,wBAAKM,KACL,yBAAG,cAAYC,OARRD,EADD,QAgBnB,C","sources":["api/api.jsx","components/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '7578f42464aa1bf410194c3f5bd12bea';\n\nexport const fetchTrendMovies = async () => {\n  const { data } = await axios.get(\n    `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`\n  );\n  return data;\n};\n\nexport const fetchMoviesByQuery = async query => {\n  const { data } = await axios.get(\n    `${BASE_URL}/search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1&include_adult=false`\n  );\n  return data;\n};\n\nexport const fetchMoviesById = async movieId => {\n  const { data } = await axios.get(\n    `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n  return data;\n};\n\nexport const fetchMovieCast = async movieId => {\n  const { data } = await axios.get(\n    `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return data;\n};\n\nexport const fetchMovieReviews = async movieId => {\n  const { data } = await axios.get(\n    `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  return data;\n};\n","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { fetchMovieCast } from '../../api/api';\nimport { Loader } from '../Loader/Loader';\n\nimport imageNotFound from '../Cast/No_image.png';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const getCast = async () => {\n      try {\n        const { cast } = await fetchMovieCast(movieId);\n        setCast(cast);\n        setLoading(false);\n      } catch (error) {\n        console.log(error);\n        setLoading(false);\n      }\n    };\n    getCast();\n  }, [movieId]);\n\n  const handleImageError = event => {\n    event.target.src = imageNotFound;\n  };\n\n  return (\n    <>\n      <h2>Cast</h2>\n      {loading ? (\n        <Loader />\n      ) : (\n        <ul>\n          {cast.map(({ name, character, profile_path }) => (\n            <li key={name}>\n              <img\n                src={`https://image.tmdb.org/t/p/w500/${profile_path}`}\n                alt={profile_path ? 'actor' : 'No Image'}\n                width={200}\n                onError={handleImageError}\n              />\n              <h2>{name}</h2>\n              <p>Character: {character}</p>\n            </li>\n          ))}\n        </ul>\n      )}\n    </>\n  );\n};\n\nexport default Cast;\n"],"names":["BASE_URL","API_KEY","fetchTrendMovies","axios","data","fetchMoviesByQuery","query","fetchMoviesById","movieId","fetchMovieCast","fetchMovieReviews","useParams","useState","cast","setCast","loading","setLoading","useEffect","getCast","console","log","handleImageError","event","target","src","imageNotFound","map","name","character","profile_path","alt","width","onError"],"sourceRoot":""}